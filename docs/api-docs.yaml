openapi: 3.0.0
info:
  version: '1'
  title: SpotsAPI title
  description: desc spotsAPIааааааbbbbbccccc
paths: {}
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/SpotsOrganization/SpotsAPI/1
    
    
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    # Наличие помещения
    OpenAir:
      description: 'Справочник: Наличие помещения - находится ли спот под открытым небом'
      type: boolean
      enum:
        - true
        - false
    # Роль
    Role:
      description: 'Справочник: Роль пользователя'
      type: string
      enum:
        - 'user'
        - 'moderator'
        - 'administrator'
    # Тип спота
    SpotType:
      description: 'Справочник: Тип спорта'
      type: string
      enum:
        - 'skatepark'
        - 'street'
        - 'dirt'
        - 'vert'
        - 'bmx-racing'
        - 'flatland'
    # Вид спорта
    SportType:
      description: 'Справочник: Вид спорта'
      type: string
      enum:
        - 'bmx-freestyle'
        - 'skateboarding'
        - 'scootering'
        - 'roller-skating'
        - 'skiing'
        - 'snowboarding'
    # Спот (место для катания)
    Spot:
      description: 'Спот (место для катания)'
      type: object
      properties:
        id:
          type: integer
          format: int64
        latitudeCoordinate:
          type: string
        longitudeCoordinate:
          type: string
        rating:
          type: integer
        creationDate:
          type: string
          format: date
        editingDate:
          type: string
          format: date
        desc:
          type: string
        sportType:
          type: array
          items:
            $ref: '#/components/schemas/SportType'
        spotType:
          $ref: '#/components/schemas/SpotType'
          
    # Пользователь
    User:
      description: 'Пользователь'
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        phone:
          type: string
        registrationDate:
          type: string
          format: date
        role:
          $ref: '#/components/schemas/Role'
          
    # Комментарий
    Comment:
      description: 'Комментарий'
      type: object
      properties:
        id:
          type: integer
          format: int64
        text:
          type: string
        creationDate:
          type: string
          format: date-time
        spot:
          $ref: '#/components/schemas/Spot'
        user:
          $ref: '#/components/schemas/User'
    
    # Информация о картинке
    ImageInfo:
      description: 'Информация о картинке'
      type: object
      properties:
        id:
          type: integer
          format: int64
        originalName:
          type: string
        genName:
          type: string
        fullPath:
          type: string
        size:
          type: integer
        creationDate:
          type: string
          format: date
        spot:
          $ref: '#/components/schemas/Spot'
        user:
          $ref: '#/components/schemas/User'
    

# 2) Apply the security globally to all operations
security:
  - bearerAuth: []         # use the same name as above